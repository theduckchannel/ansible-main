---
- hosts: localhost
  vars: 
      install_drive: "/dev/sda"
      efi_partition: "/dev/sda1"
      system_partition: "/dev/sda2"
      hostname: "duckbox"
      timezone: "America/Sao_Paulo"
      btrfs_options: "ssd,noatime,compress-force=zstd:5,discard=async,autodefrag,space_cache=v2,commit=120"
      nodev_options: "nodev,nosuid,noexec"
      chroot: "arch-chroot /mnt"
      language: "en_US.UTF-8"
      code: "UTF-8"
      keyboard_layout: "br-abnt2"
      grub_gfx: "1920x1080"
  tasks:

    - name: Find Current Dir 
      shell: pwd
      register: current_dir
    - debug: var=current_dir.stdout

    - name: Abort if the host is not booted from the Arch install media
      fail:
        msg: "This host is not booted from the Arch install media!"
      when: ansible_nodename != 'archiso'
      tags:
        - quick_exit
    - name: Load my keyboard Layout
      command: loadkeys br-abnt2
    - name: Synchronize clock via NTP
      command: timedatectl set-ntp true
      tags:
        - sync_clock
    - name: Wipe all partitions
      command: wipefs --force --all "{{install_drive}}"
      tags:
        - wipefs
    - name: Zap all partitions
      command: sgdisk -Z "{{install_drive}}"
      tags:
        - sgdisk


    - name: Create EFI partition
      community.general.parted:
        device: "{{install_drive}}"
        name: EFI
        label: gpt
        part_end: 512MiB
        flags: [boot, esp]  
        number: 1
        state: present


    - name: Create System partition
      community.general.parted:
        device: "{{install_drive}}"
        name: System
        part_start: 512MiB
        label: gpt
        number: 2
        state: present

    - name: Formatting
      block:
        - name: Formatting efi partition
          filesystem:
            dev: "{{efi_partition}}"
            fstype: vfat
            opts: -F32
            force: yes

        - name: Formatting system partition
          filesystem:
            dev: "{{system_partition}}"
            fstype: btrfs
            force: yes


    - name: Mounting Filesystems
      block:
        - name: Mount System Partition
          shell: mount -t btrfs "{{system_partition}}" /mnt
          args:
            executable: /bin/bash


        - name: Create subvolume @
          shell: btrfs su cr /mnt/@
          args:
            executable: /bin/bash


        - name: Create subvolumes @home
          shell: btrfs su cr /mnt/@home
          args:
            executable: /bin/bash


        - name: Create subvolume @var
          shell: btrfs su cr /mnt/@var
          args:
            executable: /bin/bash


        - name: Create subvolume @snapshots
          shell: btrfs su cr /mnt/@snapshots
          args:
            executable: /bin/bash


        - name: Umount System Partition
          shell: umount  /mnt
          args:
            executable: /bin/bash



        - name: Mount @ Subvolume
          shell: mount -t btrfs -o "{{btrfs_options}}",subvol=@ "{{system_partition}}" /mnt 
          args:
            executable: /bin/bash


        - name: Create Directories
          shell: mkdir -p /mnt/{boot/efi,home,var,.snapshots}
          args:
            executable: /bin/bash


        - name: Mount @home Subvolume
          shell: mount -t btrfs -o "{{btrfs_options}}",subvol=@home "{{system_partition}}" /mnt/home
          args:
            executable: /bin/bash


        - name: Mount @var Subvolume
          shell: mount -t btrfs -o "{{nodev_options}}","{{btrfs_options}}",subvol=@var "{{system_partition}}" /mnt/var
          args:
            executable: /bin/bash


        - name: Mount @snapshots Subvolume
          shell: mount -t btrfs -o "{{btrfs_options}}",subvol=@snapshots "{{system_partition}}" /mnt/.snapshots
          args:
            executable: /bin/bash


        - name: Mount Efi Partition
          shell: mount "{{efi_partition}}" /mnt/boot/efi
          args:
            executable: /bin/bash


        - name: Install base System
          command: pacstrap /mnt base base-devel linux linux-firmware amd-ucode btrfs-progs git go zstd networkmanager openssh grub grub-btrfs efibootmgr dosfstools mtools os-prober ntfs-3g zsh zsh-completions xdg-user-dirs pbzip2 unrar lzop p7zip man network-manager-applet compsize reflector rsync vim sudo wget mlocate unzip ansible
          tags:
            - pacstrap

        - name: Generate fstab 
          shell: genfstab -U /mnt>>/mnt/etc/fstab
          tags:
            - fstab


        - name: Set Timezone
          shell: "{{chroot}} ln -sf /usr/share/zoneinfo/{{timezone}} /etc/localtime"
          tags:
            - set-timezone


        - name: hwclock
          shell: "{{chroot}} hwclock --systohc"
          tags:
            - hwclock

              
        - name: Create /etc/localeg.gen
          copy:
            content: "{{language}} {{code}}\r\n"
            dest: "/mnt/etc/locale.gen"  

        - name: locale-gen
          shell: "{{chroot}} locale-gen"
          tags:
            - locale-gen


        - name: /etc/locale.conf
          copy:
            content: "LANG={{language}}\r\n"
            dest: "/mnt/etc/locale.conf"  

        - name: /etc/vconsole.conf
          copy:
            content: "KEYMAP={{keyboard_layout}}\r\n"
            dest: "/mnt/etc/vconsole.conf"  


        - name: Set hostname
          copy:
            content: "{{hostname}}\r\n"
            dest: "/mnt/etc/hostname"  


        - name: Insert data to hosts file
          blockinfile:
            path: /mnt/etc/hosts
            block: "127.0.0.1     localhost\r\n::1      localhost\r\n127.0.0.1      {{hostname}}.localdomain      {{hostname}}\r\n"


        - name: Enable Network Manager
          shell: "{{chroot}} systemctl enable NetworkManager"
          tags:
            - NetworkManager_service



        - name: /etc/mkinitcpio.conf (Binaries)
          ansible.builtin.lineinfile:
            path: /mnt/etc/mkinitcpio.conf
            regexp: '^BINARIES=()'
            line: 'BINARIES=("/usr/bin/btrfs")'


        - name: /etc/mkinitcpio.conf (Compression)
          ansible.builtin.lineinfile:
            path: /mnt/etc/mkinitcpio.conf
            regexp: '^#COMPRESSION="lz4"'
            line: 'COMPRESSION="lz4"'


        - name: /etc/mkinitcpio.conf (Compression Options)
          ansible.builtin.lineinfile:
            path: /mnt/etc/mkinitcpio.conf
            regexp: '^#COMPRESSION_OPTIONS=()'
            line: 'COMPRESSION_OPTIONS=(-9)'

        - name: /etc/mkinitcpio.conf (Modules)
          ansible.builtin.lineinfile:
            path: /mnt/etc/mkinitcpio.conf
            regexp: '^MODULES=()'
            line: 'MODULES=(btrfs)'


        - name: mkinitcpio -p linux
          shell: "{{chroot}} mkinitcpio -p linux"
          tags:
            - mkinitcpio


        - name: /etc/default/grub (2)
          ansible.builtin.lineinfile:
            path: /mnt/etc/default/grub
            regexp: '^GRUB_CMDLINE_LINUX_DEFAULT=.*'
            line: 'GRUB_CMDLINE_LINUX_DEFAULT=""'
             

        - name: /etc/default/grub (5)
          ansible.builtin.lineinfile:
            path: /mnt/etc/default/grub
            regexp: '^GRUB_GFXMODE=auto'
            line: "GRUB_GFXMODE=\"{{grub_gfx}}\""


        - name: Inserte os-prober line to grub
          blockinfile:
            path: /mnt/etc/default/grub
            block: |
              GRUB_DISABLE_OS_PROBER=false


        - name: Install grub
          shell: "{{chroot}} grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB"
          tags:
            - grub-install


        - name: Update grub
          shell: "{{chroot}} grub-mkconfig -o /boot/grub/grub.cfg"
          tags:
            - grub-mkconfig


        - name: Install grub Theme - Cyberpunk
          ansible.posix.synchronize:
            src: "{{current_dir.stdout}}/Cyberpunk"
            dest: /mnt/boot/grub/themes/
             

        - name: /etc/default/grub (Theme)
          ansible.builtin.lineinfile:
            path: /mnt/etc/default/grub
            regexp: '^#GRUB_THEME.*'
            line: 'GRUB_THEME="/boot/grub/themes/Cyberpunk/theme.txt"'

        - name: Update grub
          shell: "{{chroot}} grub-mkconfig -o /boot/grub/grub.cfg"
          tags:
            - grub-mkconfig


